import os
import re
from setuptools import setup, find_packages, find_namespace_packages
from setuptools.command.build_py import build_py as _build_py
import subprocess

def print_tree(startpath):
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 4 * (level)
        print(f"{indent}{os.path.basename(root)}/")
        subindent = ' ' * 4 * (level + 1)
        for f in files:
            print(f"{subindent}{f}")

def modify_proto_imports(file_path):
    """ 修改 Protobuf 生成文件中的绝对导入为相对导入 """
    patterns = [
        # 匹配 import xxx_pb2 或 import xxx_pb2 as alias
        (r'^import (\w+_pb2)( as \w+)?$', r'from . import \1\2'),
    ]
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    modified = False
    for pattern, replacement in patterns:
        new_content, count = re.subn(
            pattern, replacement, content,
            flags=re.MULTILINE
        )
        if count > 0:
            content = new_content
            modified = True
    
    if modified:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)

class build_py(_build_py):
    def run(self):
        # 生成 proto 文件到临时目录
        project_dir = os.path.abspath(os.path.dirname(__file__))
        proto_dir = os.path.join(project_dir, 'proto-public-api')
        out_dir = os.path.join(project_dir, 'hex_vehicle', 'generated')

        # 确保生成目录存在
        os.makedirs(out_dir, exist_ok=True)

        # 编译 proto 文件
        proto_files = [f for f in os.listdir(proto_dir) if f.endswith('.proto')]
        for proto_file in proto_files:
            proto_path = os.path.join(proto_dir, proto_file)
            subprocess.check_call([
                'protoc',
                '--python_out', out_dir,
                '--proto_path', proto_dir,
                proto_path
            ])

        # 生成 __init__.py
        init_path = os.path.join(out_dir, '__init__.py')
        if not os.path.exists(init_path):
            with open(init_path, 'w') as f:
                f.write('# Auto-generated by setup.py\n')

        # print("目录结构:")
        # print_tree(os.path.abspath(os.path.dirname(__file__)))

        # 后处理：修改生成的 pb2.py 文件
        for root, _, files in os.walk(out_dir):
            for file in files:
                if file.endswith('_pb2.py'):
                    modify_proto_imports(os.path.join(root, file))

        # 将生成的文件动态添加到packages中
        generated_pkg = 'hex_vehicle.generated'
        if generated_pkg not in self.packages:
            self.packages.append(generated_pkg)

        # print("Package data:", self.package_data)

        # 调用父类方法，确保生成文件被复制到构建目录
        super().run()

setup(
    name="hex_vehicle",
    version="0.1",
    packages=find_namespace_packages(),
    cmdclass={"build_py": build_py},
    include_package_data=True,
)